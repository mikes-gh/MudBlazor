using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.AspNetCore.Components;

namespace MudBlazor.Docs.Compiler
{
    public static class DocStringsGenerator
    {
        private const string docStringsFile = "DocStrings.cs";

        public static void GenerateDocStrings(string docsPath)
        {
            var docsStringsPath = Directory.EnumerateFiles(docsPath, docStringsFile, SearchOption.AllDirectories).FirstOrDefault();
            if (docsStringsPath == null)
                throw new InvalidOperationException("File not found: " + docStringsFile);
            using (var f = File.Create(docsStringsPath.Replace(".cs",".generated.cs")))
            using (var w = new StreamWriter(f) { NewLine = "\n" })
            {
                w.WriteLine("// NOTE: this file is autogenerated. Any changes will be overwritten!");
                w.WriteLine(
                    @"namespace MudBlazor.Docs.Models
{
    public static partial class DocStrings
    {
");
                var assembly = typeof(MudText).Assembly;
                foreach (var type in assembly.GetTypes().OrderBy(t => GetSaveTypename(t)))
                {
                    foreach (var info in type.GetPropertyInfosWithAttribute<ParameterAttribute>())
                    {
                        var doc = info.GetDocumentation();
                        doc = Regex.Replace(doc ?? "", @"</?.+?>", "");

                        w.WriteLine($"public const string {GetSaveTypename(type).TrimEnd('_')}_{info.Name} = @\"{EscapeDescription(doc)}\";\n");
                        //return new ApiProperty()
                        //{
                        //    Name = info.Name,
                        //    Type = info.PropertyType.ConvertToCSharpSource(),
                        //    Description = doc
                        //};
                    }
                }

                w.WriteLine(
                    @"    }
}
");
                w.Flush();
            }
        }

        private static string GetSaveTypename(Type t) => Regex.Replace(t.ConvertToCSharpSource(), @"[\.<>]", "_");

        private static string EscapeDescription(string doc)
        {
            return doc.Replace("\"", "\"\"").Trim();
        }

    }
}
